import { prisma } from '@/lib/prisma';
import { NextRequest } from 'next/server';

export interface LogActivity {
  userId: string;
  userName: string;
  userRole: string;
  action: string;
  target: string;
  targetId?: string;
  details?: any;
  request?: NextRequest;
}

export async function logActivity({
  userId,
  userName,
  userRole,
  action,
  target,
  targetId,
  details,
  request
}: LogActivity) {
  try {
    // Extract IP address and User Agent from request
    let ipAddress: string | undefined;
    let userAgent: string | undefined;

    if (request) {
      // Get IP address
      ipAddress = request.headers.get('x-forwarded-for') || 
                  request.headers.get('x-real-ip') || 
                  request.headers.get('cf-connecting-ip') || 
                  'unknown';
      
      // Get User Agent
      userAgent = request.headers.get('user-agent') || undefined;
    }

    // Create activity log
    await prisma.activityLog.create({
      data: {
        userId,
        userName,
        userRole,
        action,
        target,
        targetId,
        details: details ? JSON.stringify(details) : null,
        ipAddress,
        userAgent
      }
    });

    console.log(`üìù Activity logged: ${action} by ${userName} (${userRole})`);
  } catch (error) {
    console.error('Error logging activity:', error);
    // Don't throw error to prevent breaking the main functionality
  }
}

// Activity action constants
export const ACTIVITY_ACTIONS = {
  // Banner actions
  UPLOAD_BANNER: 'UPLOAD_BANNER',
  DELETE_BANNER: 'DELETE_BANNER',
  
  // Match actions
  CREATE_MATCH: 'CREATE_MATCH',
  UPDATE_MATCH: 'UPDATE_MATCH',
  DELETE_MATCH: 'DELETE_MATCH',
  UPDATE_MATCH_SCORE: 'UPDATE_MATCH_SCORE',
  UPDATE_MATCH_STATUS: 'UPDATE_MATCH_STATUS',
  
  // Email actions
  SEND_24H_REMINDER: 'SEND_24H_REMINDER',
  SEND_MATCH_RESULT: 'SEND_MATCH_RESULT',
  
  // User actions
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  
  // Subscription actions
  EMAIL_SUBSCRIBE: 'EMAIL_SUBSCRIBE',
  EMAIL_UNSUBSCRIBE: 'EMAIL_UNSUBSCRIBE'
} as const;

// Helper function to format action names for display
export function formatActionName(action: string): string {
  const actionMap: Record<string, string> = {
    'UPLOAD_BANNER': '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î Banner',
    'DELETE_BANNER': '‡∏•‡∏ö Banner',
    'CREATE_MATCH': '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
    'UPDATE_MATCH': '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
    'DELETE_MATCH': '‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
    'UPDATE_MATCH_SCORE': '‡πÉ‡∏™‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
    'UPDATE_MATCH_STATUS': '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
    'SEND_24H_REMINDER': '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
    'SEND_MATCH_RESULT': '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
    'LOGIN': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
    'LOGOUT': '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
    'EMAIL_SUBSCRIBE': '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
    'EMAIL_UNSUBSCRIBE': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•'
  };
  
  return actionMap[action] || action;
}

// Helper function to format Thai date
export function formatThaiDateTime(date: Date): string {
  const thaiMonths = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];

  const day = date.getDate();
  const month = thaiMonths[date.getMonth()];
  const year = date.getFullYear() + 543; // Convert to Buddhist Era
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');

  return `${day} ${month} ${year} ${hours}:${minutes} ‡∏ô.`;
}
