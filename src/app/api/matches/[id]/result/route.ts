import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/session';
import { PrismaClient } from '@prisma/client';
import { sendMatchResult } from '@/lib/email';
import { logActivity, ACTIVITY_ACTIONS } from '@/lib/activityLogger';

const prisma = new PrismaClient();

export async function PUT(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params;
    const matchId = resolvedParams.id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' },
        { status: 401 }
      );
    }

    const userRole = (session.user as any).role;
    const userId = (session.user as any).id;

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request
    const { homeScore, awayScore, winner } = await req.json();

    // ‡∏´‡∏≤ Match
    const match = await prisma.match.findUnique({
      where: { id: matchId },
    });

    if (!match) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô' },
        { status: 404 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - Admin ‡∏´‡∏£‡∏∑‡∏≠ Sport Manager ‡∏Ç‡∏≠‡∏á‡∏Å‡∏µ‡∏¨‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (userRole !== 'ADMIN') {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ sportType
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { sportType: true, role: true }
      });

      if (!user || user.role !== 'SPORT_MANAGER' || user.sportType !== match.sportType) {
        return NextResponse.json(
          { error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ô‡∏µ‡πâ' },
          { status: 403 }
        );
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏ú‡∏•‡πÑ‡∏î‡πâ
    if (!['PENDING_RESULT', 'COMPLETED'].includes(match.status)) {
      return NextResponse.json(
        { error: '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' },
        { status: 400 }
      );
    }

    // Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (homeScore === undefined || awayScore === undefined || !winner) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
        { status: 400 }
      );
    }

    if (homeScore < 0 || awayScore < 0) {
      return NextResponse.json(
        { error: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö' },
        { status: 400 }
      );
    }

    if (!['team1', 'team2', 'draw'].includes(winner)) {
      return NextResponse.json(
        { error: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 400 }
      );
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    const updatedMatch = await prisma.match.update({
      where: { id: matchId },
      data: {
        homeScore: parseInt(homeScore),
        awayScore: parseInt(awayScore),
        status: 'COMPLETED' as any, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô COMPLETED ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏™‡πà‡∏ú‡∏•
        updatedAt: new Date(),
      },
      include: {
        sport: true // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏µ‡∏¨‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      }
    });

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
    try {
      const subscribers = await prisma.subscriber.findMany({
        where: { isActive: true },
        select: { email: true }
      });

      if (subscribers.length > 0) {
        const subscriberEmails = subscribers.map(sub => sub.email);
        
        const emailResult = await sendMatchResult(subscriberEmails, {
          sportType: updatedMatch.sportType,
          team1: updatedMatch.team1,
          team2: updatedMatch.team2,
          date: updatedMatch.date.toLocaleDateString('th-TH'),
          timeStart: updatedMatch.timeStart || '',
          timeEnd: updatedMatch.timeEnd || '',
          location: updatedMatch.location,
          homeScore: updatedMatch.homeScore!,
          awayScore: updatedMatch.awayScore!,
          winner: (updatedMatch as any).winner!
        });

        console.log(`üìß Match result email sent to ${subscriberEmails.length} subscribers:`, emailResult.success ? 'Success' : 'Failed');
      }
    } catch (emailError) {
      console.error('Error sending match result email:', emailError);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Activity Log
    await logActivity({
      userId: (session.user as any).id!,
      userName: session.user.name || 'Unknown',
      userRole: (session.user as any).role,
      action: ACTIVITY_ACTIONS.UPDATE_MATCH_SCORE,
      target: `${updatedMatch.team1} vs ${updatedMatch.team2} (${updatedMatch.sportType})`,
      targetId: updatedMatch.id,
      details: {
        homeScore: updatedMatch.homeScore,
        awayScore: updatedMatch.awayScore,
        winner: (updatedMatch as any).winner,
        previousStatus: match.status,
        newStatus: 'COMPLETED'
      },
      request: req
    });

    return NextResponse.json({
      message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      match: {
        id: updatedMatch.id,
        homeScore: updatedMatch.homeScore,
        awayScore: updatedMatch.awayScore,
        winner: (updatedMatch as any).winner,
        team1: updatedMatch.team1,
        team2: updatedMatch.team2,
      },
    });

  } catch (error: any) {
    console.error('Error updating match result:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó', details: error.message },
      { status: 500 }
    );
  }
}
