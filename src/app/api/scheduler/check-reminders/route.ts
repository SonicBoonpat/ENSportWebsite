import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { send24HourReminder } from '@/lib/email';

export async function GET(request: NextRequest) {
  try {
    // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    const now = new Date();
    const thaiDateFormatter = new Intl.DateTimeFormat('en-CA', {
      timeZone: 'Asia/Bangkok',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
    
    const thaiTimeFormatter = new Intl.DateTimeFormat('en-GB', {
      timeZone: 'Asia/Bangkok',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });
    
    const currentDate = thaiDateFormatter.format(now); // YYYY-MM-DD
    const currentTime = thaiTimeFormatter.format(now); // HH:MM

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowDate = thaiDateFormatter.format(tomorrow);

    console.log(`üïê Checking for 24-hour reminders at ${currentDate} ${currentTime}`);
    console.log(`üìÖ Looking for matches on ${tomorrowDate} at ${currentTime}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (¬±5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const matches = await prisma.match.findMany({
      where: {
        date: new Date(tomorrowDate + 'T00:00:00.000Z'),
        timeStart: {
          not: null
        },
        status: 'SCHEDULED', // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° field reminderSent ‡πÉ‡∏ô schema ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
      },
      include: {
        sport: true
      }
    });

    console.log(`üìã Found ${matches.length} matches for tomorrow`);

    if (matches.length === 0) {
      return NextResponse.json({
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        currentTime: `${currentDate} ${currentTime}`,
        tomorrowDate
      });
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (¬±5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const matchesToNotify = matches.filter(match => {
      if (!match.timeStart) return false;
      
      const [matchHour, matchMinute] = match.timeStart.split(':').map(Number);
      const [currentHour, currentMinute] = currentTime.split(':').map(Number);
      
      const matchTimeInMinutes = matchHour * 60 + matchMinute;
      const currentTimeInMinutes = currentHour * 60 + currentMinute;
      
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ¬±5 ‡∏ô‡∏≤‡∏ó‡∏µ
      const timeDiff = Math.abs(matchTimeInMinutes - currentTimeInMinutes);
      return timeDiff <= 5;
    });

    console.log(`‚è∞ Found ${matchesToNotify.length} matches to send reminders for`);

    if (matchesToNotify.length === 0) {
      return NextResponse.json({
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
        currentTime: `${currentDate} ${currentTime}`,
        totalMatches: matches.length
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà active
    const subscribers = await prisma.subscriber.findMany({
      where: { isActive: true },
      select: { email: true }
    });

    if (subscribers.length === 0) {
      return NextResponse.json({
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
        matchesFound: matchesToNotify.length
      });
    }

    const subscriberEmails = subscribers.map(sub => sub.email);
    const results = [];

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    for (const match of matchesToNotify) {
      try {
        const emailResult = await send24HourReminder(subscriberEmails, {
          sportType: match.sportType,
          team1: match.team1,
          team2: match.team2,
          date: match.date.toLocaleDateString('th-TH'),
          timeStart: match.timeStart || '',
          timeEnd: match.timeEnd || '',
          location: match.location,
          mapsLink: match.mapsLink
        });

        results.push({
          matchId: match.id,
          sport: match.sportType,
          teams: `${match.team1} vs ${match.team2}`,
          success: emailResult.success,
          sentTo: emailResult.success ? subscriberEmails.length : 0,
          error: emailResult.error || null
        });

        console.log(`üìß Sent 24-hour reminder for ${match.sportType}: ${match.team1} vs ${match.team2}`);

      } catch (error) {
        console.error(`Error sending reminder for match ${match.id}:`, error);
        results.push({
          matchId: match.id,
          sport: match.sportType,
          teams: `${match.team1} vs ${match.team2}`,
          success: false,
          sentTo: 0,
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    const successCount = results.filter(r => r.success).length;
    const totalSent = results.reduce((sum, r) => sum + r.sentTo, 0);

    return NextResponse.json({
      message: `‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      currentTime: `${currentDate} ${currentTime}`,
      totalMatches: matchesToNotify.length,
      successfulNotifications: successCount,
      totalEmailsSent: totalSent,
      subscriberCount: subscriberEmails.length,
      results
    });

  } catch (error) {
    console.error('Error in check-reminders scheduler:', error);
    return NextResponse.json(
      { 
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
