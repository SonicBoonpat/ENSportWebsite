generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  isActive  Boolean    @default(true)
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  password  String
  lastLogin DateTime?
  name      String?
  sportType String?
  alerts    Alert[]
  favorites Favorite[]

  @@map("users")
}

model Sport {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  leagues     League[]
  matches     Match[]
  teams       Team[]

  @@map("sports")
}

model League {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  country   String?
  season    String?
  logo      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sportId   String
  sport     Sport    @relation(fields: [sportId], references: [id])
  matches   Match[]
  teams     Team[]

  @@index([sportId], map: "leagues_sportId_fkey")
  @@map("leagues")
}

model Team {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  logo        String?
  country     String?
  city        String?
  founded     Int?
  website     String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sportId     String
  leagueId    String?
  favorites   Favorite[]
  awayMatches Match[]    @relation("AwayTeam")
  homeMatches Match[]    @relation("HomeTeam")
  league      League?    @relation(fields: [leagueId], references: [id])
  sport       Sport      @relation(fields: [sportId], references: [id])

  @@index([leagueId], map: "teams_leagueId_fkey")
  @@index([sportId], map: "teams_sportId_fkey")
  @@map("teams")
}

model Match {
  id         String      @id @default(cuid())
  date       DateTime
  timeStart  String      // เวลาเริ่ม HH:MM
  timeEnd    String      // เวลาจบ HH:MM
  location   String      // สถานที่
  mapsLink   String      // Google Maps link
  team1      String      // คณะ/สาขาที่ 1
  team2      String      // คณะ/สาขาที่ 2
  sportType  String      // ประเภทกีฬา (เพื่อไม่ซ้ำกับ relation)
  venue      String?
  round      String?
  week       Int?
  status     MatchStatus @default(SCHEDULED)
  homeScore  Int?
  awayScore  Int?
  extraInfo  String?     @db.LongText
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sportId    String?     // ทำให้เป็น optional
  leagueId   String?
  homeTeamId String?     // ทำให้เป็น optional
  awayTeamId String?     // ทำให้เป็น optional
  alerts     Alert[]
  awayTeam   Team?       @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam   Team?       @relation("HomeTeam", fields: [homeTeamId], references: [id])
  league     League?     @relation(fields: [leagueId], references: [id])
  sport      Sport?      @relation(fields: [sportId], references: [id])

  @@index([awayTeamId], map: "matches_awayTeamId_fkey")
  @@index([homeTeamId], map: "matches_homeTeamId_fkey")
  @@index([leagueId], map: "matches_leagueId_fkey")
  @@index([sportId], map: "matches_sportId_fkey")
  @@map("matches")
}

model Alert {
  id           String    @id @default(cuid())
  type         AlertType
  isActive     Boolean   @default(true)
  notifyBefore Int?
  message      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  matchId      String?
  match        Match?    @relation(fields: [matchId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@index([matchId], map: "alerts_matchId_fkey")
  @@index([userId], map: "alerts_userId_fkey")
  @@map("alerts")
}

model Favorite {
  id        String       @id @default(cuid())
  type      FavoriteType
  createdAt DateTime     @default(now())
  userId    String
  teamId    String?
  team      Team?        @relation(fields: [teamId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, teamId, type])
  @@index([teamId], map: "favorites_teamId_fkey")
  @@map("favorites")
}

enum UserRole {
  USER
  SPORT_MANAGER
  EDITOR
  ADMIN
}

enum MatchStatus {
  SCHEDULED
  LIVE
  HALFTIME
  FINISHED
  POSTPONED
  CANCELLED
}

enum AlertType {
  MATCH_START
  GOAL_SCORED
  MATCH_END
  TEAM_NEWS
}

enum FavoriteType {
  TEAM
  LEAGUE
}
