// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id          String   @id @default(cuid())
  username    String   @unique
  password    String
  isActive    Boolean  @default(true)
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  alerts      Alert[]
  favorites   Favorite[]

  @@map("users")
}

// Sports categories (Football, Basketball, etc.)
model Sport {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // e.g., "FB" for Football, "BB" for Basketball
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teams       Team[]
  matches     Match[]
  leagues     League[]

  @@map("sports")
}

// Leagues/Competitions (Premier League, Champions League, etc.)
model League {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  country     String?
  season      String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sportId     String
  sport       Sport    @relation(fields: [sportId], references: [id])
  teams       Team[]
  matches     Match[]

  @@map("leagues")
}

// Teams
model Team {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  logo        String?
  country     String?
  city        String?
  founded     Int?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sportId     String
  sport       Sport     @relation(fields: [sportId], references: [id])
  leagueId    String?
  league      League?   @relation(fields: [leagueId], references: [id])
  
  homeMatches Match[]   @relation("HomeTeam")
  awayMatches Match[]   @relation("AwayTeam")
  favorites   Favorite[]

  @@map("teams")
}

// Matches/Games
model Match {
  id            String      @id @default(cuid())
  date          DateTime
  venue         String?
  round         String?
  week          Int?
  status        MatchStatus @default(SCHEDULED)
  homeScore     Int?
  awayScore     Int?
  extraInfo     Json?       // Additional match info like statistics, events
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  sportId       String
  sport         Sport       @relation(fields: [sportId], references: [id])
  leagueId      String?
  league        League?     @relation(fields: [leagueId], references: [id])
  homeTeamId    String
  homeTeam      Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId    String
  awayTeam      Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  
  alerts        Alert[]

  @@map("matches")
}

// User alerts for matches, teams, or leagues
model Alert {
  id          String    @id @default(cuid())
  type        AlertType
  isActive    Boolean   @default(true)
  notifyBefore Int?     // Minutes before event to notify
  message     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  matchId     String?
  match       Match?    @relation(fields: [matchId], references: [id])

  @@map("alerts")
}

// User favorites (teams, leagues)
model Favorite {
  id        String   @id @default(cuid())
  type      FavoriteType
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId, type])
  @@map("favorites")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum MatchStatus {
  SCHEDULED
  LIVE
  HALFTIME
  FINISHED
  POSTPONED
  CANCELLED
}

enum AlertType {
  MATCH_START
  GOAL_SCORED
  MATCH_END
  TEAM_NEWS
}

enum FavoriteType {
  TEAM
  LEAGUE
}
